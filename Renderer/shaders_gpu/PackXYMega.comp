#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_buffer_reference : require

#include "common_gpu.h"
struct AllBufferReferences
{
  uint dummy[2];
};
layout(binding = 0, set = 0) buffer data0 { uint m_packedXY[]; }; // 
layout(binding = 1, set = 0) buffer dataUBO { MultiRenderer_GPU_UBO_Data ubo; };



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
layout( push_constant ) uniform kernelArgs
{
  uint iNumElementsX; 
  uint iNumElementsY; 
  uint iNumElementsZ; 
  uint tFlagsMask;    
} kgenArgs;

///////////////////////////////////////////////////////////////// subkernels here
void kernel_PackXY_m_packedXY(uint tidX, uint tidY, uint out_pakedXYOffset) 
{
  
  if (tidX >= ubo.m_packedXY_width || tidY >= ubo.m_packedXY_height)
    return;

  const uint offset   = SuperBlockIndex2DOpt(tidX, tidY, ubo.m_packedXY_width);
  m_packedXY[offset + out_pakedXYOffset] = ((tidY << 16) & 0xFFFF0000) | (tidX & 0x0000FFFF);

}

///////////////////////////////////////////////////////////////// subkernels here

void main()
{
  ///////////////////////////////////////////////////////////////// prolog
  const uint tidX = uint(gl_GlobalInvocationID[0]); 
  const uint tidY = uint(gl_GlobalInvocationID[1]); 
  ///////////////////////////////////////////////////////////////// prolog

  
  kernel_PackXY_m_packedXY(tidX, tidY, 0);

}

