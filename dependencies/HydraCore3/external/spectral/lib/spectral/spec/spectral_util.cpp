#include <spec/spectral_util.h>
#include <internal/common/lazy_value.h>

#ifdef SPECTRAL_ENABLE_OPENMP
#include <omp.h>
#endif

#include <iostream>

namespace spec::util {

    namespace {
        LazyValue<Float> d6500_cie_int{[]() -> Float { return get_cie_y_integral(CIE_D6500); }};
    }

    Float get_cie_y_integral()
    {

        return 10567.1f;
    }

    Float get_cie_y_integral(const ISpectrum &light)
    {

        Float val = 0.0f;
        for(int lambda = WAVELENGHTS_START; lambda <= WAVELENGHTS_END; lambda += WAVELENGHTS_STEP) {
        //for(int lambda : wl) {
            Float lightval = light.get_or_interpolate(lambda);
            val += _interp<Y_CURVE>(lambda) * WAVELENGHTS_STEP * lightval;
        }
        return val;
    }

    BasicSpectrum convert_to_spd(const ISpectrum &spectrum, const std::vector<Float> &wavelenghts)
    {
        BasicSpectrum spec;
        if(wavelenghts.empty()) {
            for(int i = WAVELENGHTS_START; i <= WAVELENGHTS_END; i += WAVELENGHTS_STEP) {
                spec.set(Float(i), spectrum(Float(i)));
            }
        }
        else {
            for(Float v : wavelenghts) {
                spec.set(v, spectrum(v));
            }
        }
        return spec;
    }

    const BasicSpectrum CIE_D6500{
        {300.000000f, 0.034100f}, 
        {305.000000f, 1.664300f},
        {310.000000f, 3.294500f},
        {315.000000f, 11.765200f},
        {320.000000f, 20.236000f},
        {325.000000f, 28.644699f},
        {330.000000f, 37.053501f},
        {335.000000f, 38.501099f},
        {340.000000f, 39.948799f},
        {345.000000f, 42.430199f},
        {350.000000f, 44.911701f},
        {355.000000f, 45.775002f},
        {360.000000f, 46.638302f},
        {365.000000f, 49.363701f},
        {370.000000f, 52.089100f},
        {375.000000f, 51.032299f},
        {380.000000f, 49.975498f},
        {385.000000f, 52.311798f},
        {390.000000f, 54.648201f},
        {395.000000f, 68.701500f},
        {400.000000f, 82.754898f},
        {405.000000f, 87.120399f},
        {410.000000f, 91.486000f},
        {415.000000f, 92.458900f},
        {420.000000f, 93.431801f},
        {425.000000f, 90.056999f},
        {430.000000f, 86.682297f},
        {435.000000f, 95.773598f},
        {440.000000f, 104.864998f},
        {445.000000f, 110.935997f},
        {450.000000f, 117.008003f},
        {455.000000f, 117.410004f},
        {460.000000f, 117.811996f},
        {465.000000f, 116.335999f},
        {470.000000f, 114.861000f},
        {475.000000f, 115.391998f},
        {480.000000f, 115.922997f},
        {485.000000f, 112.366997f},
        {490.000000f, 108.810997f},
        {495.000000f, 109.082001f},
        {500.000000f, 109.353996f},
        {505.000000f, 108.578003f},
        {510.000000f, 107.802002f},
        {515.000000f, 106.295998f},
        {520.000000f, 104.790001f},
        {525.000000f, 106.238998f},
        {530.000000f, 107.689003f},
        {535.000000f, 106.046997f},
        {540.000000f, 104.404999f},
        {545.000000f, 104.224998f},
        {550.000000f, 104.045998f},
        {555.000000f, 102.023003f},
        {560.000000f, 100.000000f},
        {565.000000f, 98.167099f},
        {570.000000f, 96.334198f},
        {575.000000f, 96.061096f},
        {580.000000f, 95.788002f},
        {585.000000f, 92.236801f},
        {590.000000f, 88.685600f},
        {595.000000f, 89.345901f},
        {600.000000f, 90.006203f},
        {605.000000f, 89.802597f},
        {610.000000f, 89.599098f},
        {615.000000f, 88.648903f},
        {620.000000f, 87.698700f},
        {625.000000f, 85.493599f},
        {630.000000f, 83.288597f},
        {635.000000f, 83.493896f},
        {640.000000f, 83.699203f},
        {645.000000f, 81.862999f},
        {650.000000f, 80.026802f},
        {655.000000f, 80.120697f},
        {660.000000f, 80.214600f},
        {665.000000f, 81.246201f},
        {670.000000f, 82.277802f},
        {675.000000f, 80.280998f},
        {680.000000f, 78.284203f},
        {685.000000f, 74.002701f},
        {690.000000f, 69.721298f},
        {695.000000f, 70.665199f},
        {700.000000f, 71.609100f},
        {705.000000f, 72.978996f},
        {710.000000f, 74.348999f},
        {715.000000f, 67.976501f},
        {720.000000f, 61.604000f},
        {725.000000f, 65.744797f},
        {730.000000f, 69.885597f},
        {735.000000f, 72.486298f},
        {740.000000f, 75.086998f},
        {745.000000f, 69.339798f},
        {750.000000f, 63.592701f},
        {755.000000f, 55.005402f},
        {760.000000f, 46.418201f},
        {765.000000f, 56.611801f},
        {770.000000f, 66.805397f},
        {775.000000f, 65.094101f},
        {780.000000f, 63.382801f},
        {785.000000f, 63.843399f},
        {790.000000f, 64.304001f},
        {795.000000f, 61.877899f},
        {800.000000f, 59.451900f},
        {805.000000f, 55.705399f},
        {810.000000f, 51.959000f},
        {815.000000f, 54.699799f},
        {820.000000f, 57.440601f},
        {825.000000f, 58.876499f},
        {830.000000f, 60.312500f}
    };

}
